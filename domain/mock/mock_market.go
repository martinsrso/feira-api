// Code generated by MockGen. DO NOT EDIT.
// Source: domain/market.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/martinsrso/feira-api/domain"
)

// MockMarketUsecase is a mock of MarketUsecase interface.
type MockMarketUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMarketUsecaseMockRecorder
}

// MockMarketUsecaseMockRecorder is the mock recorder for MockMarketUsecase.
type MockMarketUsecaseMockRecorder struct {
	mock *MockMarketUsecase
}

// NewMockMarketUsecase creates a new mock instance.
func NewMockMarketUsecase(ctrl *gomock.Controller) *MockMarketUsecase {
	mock := &MockMarketUsecase{ctrl: ctrl}
	mock.recorder = &MockMarketUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketUsecase) EXPECT() *MockMarketUsecaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMarketUsecase) Delete(ctx context.Context, reg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMarketUsecaseMockRecorder) Delete(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMarketUsecase)(nil).Delete), ctx, reg)
}

// GetByName mocks base method.
func (m *MockMarketUsecase) GetByName(ctx context.Context, name string) (*domain.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*domain.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockMarketUsecaseMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMarketUsecase)(nil).GetByName), ctx, name)
}

// GetByRegister mocks base method.
func (m *MockMarketUsecase) GetByRegister(ctx context.Context, reg string) (*domain.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRegister", ctx, reg)
	ret0, _ := ret[0].(*domain.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRegister indicates an expected call of GetByRegister.
func (mr *MockMarketUsecaseMockRecorder) GetByRegister(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRegister", reflect.TypeOf((*MockMarketUsecase)(nil).GetByRegister), ctx, reg)
}

// Store mocks base method.
func (m *MockMarketUsecase) Store(arg0 context.Context, arg1 *domain.Market) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMarketUsecaseMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMarketUsecase)(nil).Store), arg0, arg1)
}

// Update mocks base method.
func (m_2 *MockMarketUsecase) Update(ctx context.Context, m, dtoM *domain.Market) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m, dtoM)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMarketUsecaseMockRecorder) Update(ctx, m, dtoM interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMarketUsecase)(nil).Update), ctx, m, dtoM)
}

// MockMarketRepository is a mock of MarketRepository interface.
type MockMarketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMarketRepositoryMockRecorder
}

// MockMarketRepositoryMockRecorder is the mock recorder for MockMarketRepository.
type MockMarketRepositoryMockRecorder struct {
	mock *MockMarketRepository
}

// NewMockMarketRepository creates a new mock instance.
func NewMockMarketRepository(ctrl *gomock.Controller) *MockMarketRepository {
	mock := &MockMarketRepository{ctrl: ctrl}
	mock.recorder = &MockMarketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketRepository) EXPECT() *MockMarketRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMarketRepository) Delete(ctx context.Context, reg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMarketRepositoryMockRecorder) Delete(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMarketRepository)(nil).Delete), ctx, reg)
}

// GetByName mocks base method.
func (m *MockMarketRepository) GetByName(ctx context.Context, name string) (domain.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(domain.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockMarketRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMarketRepository)(nil).GetByName), ctx, name)
}

// GetByRegister mocks base method.
func (m *MockMarketRepository) GetByRegister(ctx context.Context, reg string) (domain.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRegister", ctx, reg)
	ret0, _ := ret[0].(domain.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRegister indicates an expected call of GetByRegister.
func (mr *MockMarketRepositoryMockRecorder) GetByRegister(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRegister", reflect.TypeOf((*MockMarketRepository)(nil).GetByRegister), ctx, reg)
}

// Store mocks base method.
func (m_2 *MockMarketRepository) Store(ctx context.Context, m *domain.Market) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Store", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMarketRepositoryMockRecorder) Store(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMarketRepository)(nil).Store), ctx, m)
}

// Update mocks base method.
func (m_2 *MockMarketRepository) Update(ctx context.Context, m, dtoM *domain.Market) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m, dtoM)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMarketRepositoryMockRecorder) Update(ctx, m, dtoM interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMarketRepository)(nil).Update), ctx, m, dtoM)
}
